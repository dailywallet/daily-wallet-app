apply plugin: "com.android.application"


project.ext.envConfigFiles = [
   releaseropsten: ".env.ropsten",
   release: ".env.production",
   debug: ".env"
]


apply from: "../../node_modules/react-native/react.gradle"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"


/**
 * Set this to true to create two separate APKs instead of one:
  *   - An APK that only works on ARM devices
   *   - An APK that only works on x86 devices
    * The advantage is the size of the APK is reduced by about 4MB.
     * Upload all the APKs to the Play Store and people will download
      * the correct one based on the CPU architecture of their device.
       */
       def enableSeparateBuildPerCPUArchitecture = false

import com.android.build.OutputFile



/**
* Run Proguard to shrink the Java bytecode in release builds.
*/
def enableProguardInReleaseBuilds = false

android {
	compileSdkVersion 26
	buildToolsVersion '26.0.3'

	defaultConfig {
		      applicationId "com.dailywallet"
      		      resValue "string", "build_config_package", "com.dailywallet"


		      minSdkVersion 16
		      targetSdkVersion 23
		      versionCode 1
		      versionName "1.0"
		      ndk {
		      	    abiFilters "armeabi-v7a", "x86"
		      }
       }

signingConfigs {
      release {
      storeFile file("my-release-key.keystore")
      storePassword "KNAFff12"
      keyAlias "my-key-alias"
      keyPassword "KNAFff12"
      }
}
								


splits {
abi {
reset()
enable enableSeparateBuildPerCPUArchitecture
universalApk false  // If true, also generate a universal APK
include "armeabi-v7a", "x86"
}
}




buildTypes {
  debug {
    applicationIdSuffix ".debug"
  }			      
  release {
    minifyEnabled enableProguardInReleaseBuilds
    proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
    signingConfig signingConfigs.release    
  }
  releaseropsten {
    initWith release
    applicationIdSuffix ".ropsten"
    signingConfig signingConfigs.release
}
								 
}
// applicationVariants are e.g. debug, release
applicationVariants.all { variant ->
variant.outputs.each { output ->
// For each separate APK per architecture, set a unique version code as described here:
// http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
def versionCodes = ["armeabi-v7a": 1, "x86": 2]
def abi = output.getFilter(OutputFile.ABI)
if (abi != null) {  // null for the universal-debug, universal-release variants
output.versionCodeOverride =
versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
}
}
}
}

dependencies {
    compile project(':react-native-camera')
    compile project(':react-native-config')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.facebook.react:react-native:+'
    compile project(':react-native-navigation')
    compile project(':react-native-fast-crypto')
    compile project(':randombytes')		 		 
}
